{
  "type": "inline-code",
  "description": "A backtick string is a string of one or more backtick characters (`) that is neither preceded nor followed by a backtick.\n\nA code span begins with a backtick string and ends with a backtick string of equal length. The contents of the code span are the characters between the two backtick strings, normalized in the following ways:\n\n First, line endings are converted to spaces.\n\n If the resulting string both begins and ends with a space character, but does not consist entirely of space characters, a single space character is removed from the front and back. This allows you to include code that begins or ends with backtick characters, which must be separated by whitespace from the opening or closing backtick strings.",
  "cases": [
    {
      "description": "GFM#338 https://github.github.com/gfm/#example-338",
      "content": "`foo`",
      "expectedHtml": "<p><code>foo</code></p>",
      "reason": "This is a simple code span"
    },
    {
      "description": "GFM#339 https://github.github.com/gfm/#example-339",
      "content": "`` foo ` bar ``",
      "expectedHtml": "<p><code>foo ` bar</code></p>",
      "reason": "Here two backticks are used, because the code contains a backtick. This example also illustrates stripping of a single leading and trailing space"
    },
    {
      "description": "GFM#340 https://github.github.com/gfm/#example-340",
      "content": "` `` `",
      "expectedHtml": "<p><code>``</code></p>",
      "reason": "This example shows the motivation for stripping leading and trailing spaces"
    },
    {
      "description": "GFM#341 https://github.github.com/gfm/#example-341",
      "content": "`  ``  `",
      "expectedHtml": "<p><code> `` </code></p>",
      "reason": "Note that only one space is stripped"
    },
    {
      "description": "GFM#342 https://github.github.com/gfm/#example-342",
      "content": "` a`",
      "expectedHtml": "<p><code> a</code></p>",
      "reason": "The stripping only happens if the space is on both sides of the string"
    },
    {
      "description": "GFM#343 https://github.github.com/gfm/#example-343",
      "content": "` b `",
      "expectedHtml": "<p><code> b </code></p>",
      "reason": "Only spaces, and not unicode whitespace in general, are stripped in this way"
    },
    {
      "description": "GFM#344 https://github.github.com/gfm/#example-344",
      "content": "` `\n`  `",
      "expectedHtml": "<p><code> </code>\n<code>  </code></p>",
      "reason": "No stripping occurs if the code span contains only spaces"
    },
    {
      "description": "GFM#345 https://github.github.com/gfm/#example-345",
      "content": "``\nfoo\nbar  \nbaz\n``",
      "expectedHtml": "<p><code>foo bar   baz</code></p>",
      "reason": "Line endings are treated like spaces"
    },
    {
      "description": "GFM#346 https://github.github.com/gfm/#example-346",
      "content": "``\nfoo \n``",
      "expectedHtml": "<p><code>foo </code></p>",
      "reason": "Line endings are treated like spaces"
    },
    {
      "description": "GFM#347 https://github.github.com/gfm/#example-347",
      "content": "`foo   bar \nbaz`",
      "expectedHtml": "<p><code>foo   bar  baz</code></p>",
      "reason": "Interior spaces are not collapsed"
    },
    {
      "description": "GFM#348 https://github.github.com/gfm/#example-348",
      "content": "`foo\\`bar`",
      "expectedHtml": "<p><code>foo\\</code>bar`</p>",
      "reason": "Note that backslash escapes do not work in code spans. All backslashes are treated literally"
    },
    {
      "description": "GFM#349 https://github.github.com/gfm/#example-349",
      "content": "``foo`bar``",
      "expectedHtml": "<p><code>foo`bar</code></p>",
      "reason": "Backslash escapes are never needed, because one can always choose a string of n backtick characters as delimiters, where the code does not contain any strings of exactly n backtick characters."
    },
    {
      "description": "GFM#350 https://github.github.com/gfm/#example-350",
      "content": "` foo `` bar `",
      "expectedHtml": "<p><code>foo `` bar</code></p>",
      "reason": "Backslash escapes are never needed, because one can always choose a string of n backtick characters as delimiters, where the code does not contain any strings of exactly n backtick characters."
    },
    {
      "description": "GFM#351 https://github.github.com/gfm/#example-351",
      "content": "*foo`*`",
      "expectedHtml": "<p>*foo<code>*</code></p>",
      "reason": "Code span backticks have higher precedence than any other inline constructs except HTML tags and autolinks. Thus, for example, this is not parsed as emphasized text, since the second * is part of a code span"
    },
    {
      "description": "GFM#357 https://github.github.com/gfm/#example-357",
      "content": "```foo``",
      "expectedHtml": "<p>```foo``</p>",
      "reason": "When a backtick string is not closed by a matching backtick string, we just have literal backticks"
    },
    {
      "description": "GFM#358 https://github.github.com/gfm/#example-358",
      "content": "`foo",
      "expectedHtml": "<p>`foo</p>",
      "reason": "When a backtick string is not closed by a matching backtick string, we just have literal backticks"
    },
    {
      "description": "GFM#359 https://github.github.com/gfm/#example-359",
      "content": "`foo``bar``",
      "expectedHtml": "<p>`foo<code>bar</code></p>",
      "reason": "The following case also illustrates the need for opening and closing backtick strings to be equal in length"
    }
  ]
}
