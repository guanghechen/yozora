import {
  YastInlineNode,
  InlinePotentialToken,
  InlineTokenDelimiter,
  InlineTokenizerMatchPhaseState,
  InlineTokenizerParsePhaseState,
  InlineTokenizerPreMatchPhaseState,
} from '@yozora/tokenizercore-inline'


/**
 * typeof {{{pascalCase tokenizerName}}}
 */
export const {{{pascalCase tokenizerName}}}Type = '{{{constantCase tokenizerName}}}'
export type {{{pascalCase tokenizerName}}}Type = typeof {{{pascalCase tokenizerName}}}Type


/**
 *
 * @example
 *    ````markdown
 *    ````
 *    ===>
 *    ```js
 *    ```
 */
export interface {{{pascalCase tokenizerName}}} extends
  YastInlineNode<{{{pascalCase tokenizerName}}}Type>,
  InlineTokenizerParsePhaseState<{{{pascalCase tokenizerName}}}Type> {
  /**
   *
   */
  children: Exclude<InlineTokenizerParsePhaseState['children'], undefined>
}


/**
 * Delimiter of {{{pascalCase tokenizerName}}}Token
 */
export interface {{{pascalCase tokenizerName}}}TokenDelimiter extends InlineTokenDelimiter {

}


/**
 * Potential token of {{{pascalCase tokenizerName}}}
 */
export interface {{{pascalCase tokenizerName}}}PotentialToken
  extends InlinePotentialToken<{{{pascalCase tokenizerName}}}Type, {{{pascalCase tokenizerName}}}TokenDelimiter> {
  /**
   * Start/Left Delimiter of {{{pascalCase tokenizerName}}}Token
   */
  openerDelimiter: {{{pascalCase tokenizerName}}}TokenDelimiter
  /**
   * End/Right Delimiter of {{{pascalCase tokenizerName}}}Token
   */
  closerDelimiter: {{{pascalCase tokenizerName}}}TokenDelimiter
  /**
   * Internal raw content fragments
   */
  innerRawContents: Exclude<InlinePotentialToken['innerRawContents'], undefined>
}


/**
 * State of pre-match phase of {{{pascalCase tokenizerName}}}Tokenizer
 */
export interface {{{pascalCase tokenizerName}}}PreMatchPhaseState
  extends InlineTokenizerPreMatchPhaseState<{{{pascalCase tokenizerName}}}Type> {
  /**
   * Start/Left Delimiter of {{{pascalCase tokenizerName}}}Token
   */
  openerDelimiter: {{{pascalCase tokenizerName}}}TokenDelimiter
  /**
   * End/Right Delimiter of {{{pascalCase tokenizerName}}}Token
   */
  closerDelimiter: {{{pascalCase tokenizerName}}}TokenDelimiter
}


/**
 * State of match phase of {{{pascalCase tokenizerName}}}Tokenizer
 */
export interface {{{pascalCase tokenizerName}}}MatchPhaseState
  extends InlineTokenizerMatchPhaseState<{{{pascalCase tokenizerName}}}Type> {
  /**
   * Start/Left Delimiter of {{{pascalCase tokenizerName}}}Token
   */
  openerDelimiter: {{{pascalCase tokenizerName}}}TokenDelimiter
  /**
   * End/Right Delimiter of {{{pascalCase tokenizerName}}}Token
   */
  closerDelimiter: {{{pascalCase tokenizerName}}}TokenDelimiter
}
