import type { YastParent } from '@yozora/tokenizercore'
import type {
  InlineTokenDelimiter,
  InlineTokenizerMatchPhaseState,
  InlineTokenizerPostMatchPhaseState,
  YastInlineNode,
} from '@yozora/tokenizercore-inline'


/**
 * typeof {{{pascalCase tokenizerName}}}
 */
export const {{{pascalCase tokenizerName}}}Type = '{{{camelCase tokenizerName}}}'
// eslint-disable-next-line @typescript-eslint/no-redeclare
export type {{{pascalCase tokenizerName}}}Type = typeof {{{pascalCase tokenizerName}}}Type


/**
 *
 * @example
 *    ````markdown
 *    ````
 *    ===>
 *    ```js
 *    ```
 */
export interface {{{pascalCase tokenizerName}}} extends
  YastInlineNode<{{{pascalCase tokenizerName}}}Type>, YastParent<YastInlineNode> {

}


/**
 * State on match phase of {{{pascalCase tokenizerName}}}Tokenizer
 */
export type {{{pascalCase tokenizerName}}}MatchPhaseState =
  & InlineTokenizerMatchPhaseState<{{{pascalCase tokenizerName}}}Type>
  & {{{pascalCase tokenizerName}}}MatchPhaseStateData


/**
 * State on post-match phase of {{{pascalCase tokenizerName}}}Tokenizer
 */
export type {{{pascalCase tokenizerName}}}PostMatchPhaseState =
  & InlineTokenizerPostMatchPhaseState<{{{pascalCase tokenizerName}}}Type>
  & {{{pascalCase tokenizerName}}}MatchPhaseStateData


/**
 * State data of match phase of {{{pascalCase tokenizerName}}}Tokenizer
 */
export interface {{{pascalCase tokenizerName}}}MatchPhaseStateData {
  /**
   * Start/Left Delimiter of {{{pascalCase tokenizerName}}}Token
   */
  openerDelimiter: {{{pascalCase tokenizerName}}}TokenDelimiter
  /**
   * End/Right Delimiter of {{{pascalCase tokenizerName}}}Token
   */
  closerDelimiter: {{{pascalCase tokenizerName}}}TokenDelimiter
}


/**
 * Delimiter of {{{pascalCase tokenizerName}}}Token
 */
export interface {{{pascalCase tokenizerName}}}TokenDelimiter extends InlineTokenDelimiter {

}
