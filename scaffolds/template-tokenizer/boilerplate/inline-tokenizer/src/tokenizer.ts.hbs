import {
  BaseInlineDataNodeTokenizer,
  CodePoint,
  DataNodeTokenPointDetail,
  InlineDataNode,
  InlineDataNodeTokenPosition,
  InlineDataNodeTokenizer,
  InlineDataNodeType,
} from '@yozora/tokenizer-core'
import { {{{pascalCase tokenizerName}}}DataNodeType, {{{pascalCase tokenizerName}}}DataNodeData } from './types'


type T = {{{pascalCase tokenizerName}}}DataNodeType


export interface {{{pascalCase tokenizerName}}}EatingState {

}


export interface {{{pascalCase tokenizerName}}}MatchedResultItem extends InlineDataNodeTokenPosition<T> {

}


/**
 * Lexical Analyzer for {{{pascalCase tokenizerName}}}DataNode
 */
export class {{{pascalCase tokenizerName}}}Tokenizer extends BaseInlineDataNodeTokenizer<
  T,
  {{{pascalCase tokenizerName}}}DataNodeData,
  {{{pascalCase tokenizerName}}}MatchedResultItem,
  {{{pascalCase tokenizerName}}}EatingState>
  implements InlineDataNodeTokenizer<T> {
  public readonly name = '{{{pascalCase tokenizerName}}}Tokenizer'
  public readonly recognizedTypes: T[] = [{{{pascalCase tokenizerName}}}DataNodeType]

  /**
   * override
   */
  protected eatTo(
    content: string,
    codePoints: DataNodeTokenPointDetail[],
    precedingTokenPosition: InlineDataNodeTokenPosition<InlineDataNodeType> | null,
    state: {{{pascalCase tokenizerName}}}EatingState,
    startIndex: number,
    endIndex: number,
    result: {{{pascalCase tokenizerName}}}MatchedResultItem[],
    precededCharacter?: CodePoint,
    followedCharacter?: CodePoint,
  ): void {
    if (startIndex >= endIndex) return
  }

  /**
   * override
   */
  protected parseData(
    content: string,
    codePoints: DataNodeTokenPointDetail[],
    tokenPosition: {{{pascalCase tokenizerName}}}MatchedResultItem,
    children?: InlineDataNode[]
  ): {{{pascalCase tokenizerName}}}DataNodeData {
    return {} as any
  }
{{#override__initializeEatingState}}

  /**
   * override
   */
  protected initializeEatingState(state: {{{pascalCase tokenizerName}}}EatingState): void {
    // eslint-disable-next-line no-param-reassign
  }
{{/override__initializeEatingState}}
}
