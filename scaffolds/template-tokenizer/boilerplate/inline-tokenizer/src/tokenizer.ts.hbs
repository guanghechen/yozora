import {
  BaseInlineDataNodeTokenizer,
  CodePoint,
  DataNodeTokenPointDetail,
  InlineDataNode,
  InlineDataNodeMatchResult,
  InlineDataNodeMatchState,
  InlineDataNodeTokenizer,
  InlineDataNodeType,
} from '@yozora/tokenizercore'
import { {{{pascalCase tokenizerName}}}DataNodeData, {{{pascalCase tokenizerName}}}DataNodeType } from './types'


type T = {{{pascalCase tokenizerName}}}DataNodeType


export interface {{{pascalCase tokenizerName}}}DataNodeMatchState extends InlineDataNodeMatchState {

}


export interface {{{pascalCase tokenizerName}}}DataNodeMatchResult extends InlineDataNodeMatchResult<T> {

}


/**
 * Lexical Analyzer for {{{pascalCase tokenizerName}}}DataNode
 */
export class {{{pascalCase tokenizerName}}}Tokenizer
  extends BaseInlineDataNodeTokenizer<
    T,
    {{{pascalCase tokenizerName}}}DataNodeData,
    {{{pascalCase tokenizerName}}}DataNodeMatchState,
    {{{pascalCase tokenizerName}}}DataNodeMatchResult>
  implements InlineDataNodeTokenizer<
    T,
    {{{pascalCase tokenizerName}}}DataNodeData,
    {{{pascalCase tokenizerName}}}DataNodeMatchResult> {

  public readonly name = '{{{pascalCase tokenizerName}}}Tokenizer'
  public readonly recognizedTypes: T[] = [{{{pascalCase tokenizerName}}}DataNodeType]

  /**
   * override
   */
  protected eatTo(
    codePoints: DataNodeTokenPointDetail[],
    precedingTokenPosition: InlineDataNodeMatchResult<InlineDataNodeType> | null,
    state: {{{pascalCase tokenizerName}}}DataNodeMatchState,
    startIndex: number,
    endIndex: number,
    result: {{{pascalCase tokenizerName}}}DataNodeMatchResult[],
    precededCharacter?: CodePoint,
    followedCharacter?: CodePoint,
  ): void {
    if (startIndex >= endIndex) return
  }

  /**
   * override
   */
  protected parseData(
    codePoints: DataNodeTokenPointDetail[],
    tokenPosition: {{{pascalCase tokenizerName}}}DataNodeMatchResult,
    children?: InlineDataNode[]
  ): {{{pascalCase tokenizerName}}}DataNodeData {
    return {} as any
  }

  // /**
  //  * override
  //  */
  // protected initializeMatchState(state: {{{pascalCase tokenizerName}}}DataNodeMatchState): void {
  //   // eslint-disable-next-line no-param-reassign
  // }
}
