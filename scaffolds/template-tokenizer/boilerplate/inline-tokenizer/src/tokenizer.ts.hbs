import type { NodePoint } from '@yozora/character'
import type { YastMeta as Meta, YastNode } from '@yozora/tokenizercore'
import type {
  InlineTokenizer,
  ResultOfFindDelimiters,
  TokenizerMatchInlineHook,
  TokenizerParseInlineHook,
} from '@yozora/tokenizercore-inline'
import type {
  {{{pascalCase tokenizerName}}} as Node,
  {{{pascalCase tokenizerName}}}Token as Token,
  {{{pascalCase tokenizerName}}}TokenDelimiter as Delimiter,
  {{{pascalCase tokenizerName}}}Type as T,
} from './types'
import { calcEscapedStringFromNodePoints } from '@yozora/character'
import { {{{pascalCase tokenizerName}}}Type } from './types'


/**
 * Params for constructing {{{pascalCase tokenizerName}}}Tokenizer.
 */
export interface {{{pascalCase tokenizerName}}}TokenizerProps {
  /**
   * Delimiter group identity.
   */
  readonly delimiterGroup?: string
  /**
   * Delimiter priority.
   */
  readonly delimiterPriority?: number
}


/**
 * Lexical Analyzer for {{{pascalCase tokenizerName}}}
 */
export class {{{pascalCase tokenizerName}}}Tokenizer implements
  InlineTokenizer,
  TokenizerMatchInlineHook<T, Meta, Token, Delimiter>,
  TokenizerParseInlineHook<T, Meta, Token, Node>
{
  public readonly name = {{{pascalCase tokenizerName}}}Tokenizer.name
  public readonly getContext: InlineTokenizer['getContext'] = () => null

  public readonly delimiterGroup: string = {{{pascalCase tokenizerName}}}Tokenizer.name
  public readonly delimiterPriority: number = Number.MAX_SAFE_INTEGER
  public readonly recognizedTypes: T[] = [{{{pascalCase tokenizerName}}}Type]

  /* istanbul ignore next */
  public constructor(props: {{{pascalCase tokenizerName}}}TokenizerProps = {}) {
    if (props.delimiterPriority != null) {
      this.delimiterPriority = props.delimiterPriority
    }
    if (props.delimiterGroup != null) {
      this.delimiterGroup = props.delimiterGroup
    }
  }

  /**
   * @override
   * @see TokenizerMatchInlineHook
   */
  public findDelimiter(
    startIndex: number,
    endIndex: number,
  ): ResultOfFindDelimiters<Delimiter> {
    const delimiter: Delimiter = {
      type: 'full',
      startIndex,
      endIndex,
    }
    return delimiter
  }

  /**
   * @override
   * @see TokenizerParseInlineHook
   */
  public processToken(
    token: Token,
    children: YastNode[] | undefined,
    nodePoints: ReadonlyArray<NodePoint>,
  ): Node {
    const { startIndex, endIndex } = token
    let value: string = calcEscapedStringFromNodePoints(
      nodePoints, startIndex, endIndex)

    // Remove the spaces at the end of the line and beginning of the next line.
    value = value.replace(/[^\S\n]*\n[^\S\n]*/g, '\n')
    const node: Node = { type: {{{pascalCase tokenizerName}}}Type, value }
    return node
  }
}
