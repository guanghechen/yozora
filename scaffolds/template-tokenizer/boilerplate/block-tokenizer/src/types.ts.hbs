import {
  PhrasingContentDataNode,
  PhrasingContentLine,
  PhrasingContentMatchPhaseState,
} from '@yozora/tokenizer-paragraph'
import {
  BlockTokenizerMatchPhaseState,
  BlockTokenizerParsePhaseState,
  BlockTokenizerPreMatchPhaseState,
  YastBlockNode,
} from '@yozora/tokenizercore-block'


/**
 * typeof {{{pascalCase tokenizerName}}}
 */
export const {{{pascalCase tokenizerName}}}Type = '{{{constantCase tokenizerName}}}'
export type {{{pascalCase tokenizerName}}}Type = typeof {{{pascalCase tokenizerName}}}Type
{{#if useBlockTokenizerParsePhaseHook}}


/**
 *
 * @example
 *    ````markdown
 *    ````
 *    ===>
 *    ```js
 *    ```
 */
export interface {{{pascalCase tokenizerName}}} extends
  YastBlockNode<{{{pascalCase tokenizerName}}}Type>,
  BlockTokenizerParsePhaseState<{{{pascalCase tokenizerName}}}Type> {
  /**
   * Contents of {{{pascalCase tokenizerName}}}
   */
  children: [PhrasingContentDataNode]
}
{{/if}}
{{#xif 'useBlockTokenizerPreParsePhaseHook || useBlockTokenizerMatchPhaseHook'}}


/**
 * State of pre-match phase of {{{pascalCase tokenizerName}}}Tokenizer
 */
export interface {{{pascalCase tokenizerName}}}PreMatchPhaseState
  extends BlockTokenizerPreMatchPhaseState<{{{pascalCase tokenizerName}}}Type> {
  /**
   * PhrasingContent 中的文本内容
   */
  lines: PhrasingContentLine[]
}
{{/xif}}


/**
 * State of match phase of {{{pascalCase tokenizerName}}}Tokenizer
 */
export interface {{{pascalCase tokenizerName}}}MatchPhaseState
  extends BlockTokenizerMatchPhaseState<{{{pascalCase tokenizerName}}}Type> {
  /**
   * Contents of heading
   */
  children: [PhrasingContentMatchPhaseState]
}
{{#if useBlockTokenizerPreParsePhaseHook}}


/**
 * Meta data of {{{pascalCase tokenizerName}}}
 */
export interface {{{pascalCase tokenizerName}}}MetaData {

}
{{/if}}
