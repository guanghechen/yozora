import type {
  EnhancedYastNodePoint,
  YastMeta,
  YastNodeInterval,
} from '@yozora/tokenizercore'
import type { YastInlineNodeType } from '../../node'


/**
 * Hooks in the match phase
 */
export interface InlineTokenizerMatchPhaseHook<
  T extends YastInlineNodeType = YastInlineNodeType,
  M extends YastMeta = YastMeta,
  MS extends InlineTokenizerMatchPhaseState<T> = InlineTokenizerMatchPhaseState<T>,
  TD extends InlineTokenDelimiter = InlineTokenDelimiter,
  > {
  /**
   * This method will be called many times when processing nodePoints
   * of one leaf block node. This is because the content seen by the current
   * tokenizer may be multiple content segments generated by splitting the
   * original content when the tokenizer with higher priority is processed.
   * These fragments will be passed to eatDelimiter for processing in turn.
   *
   * @param nodePoints  An array of EnhancedYastNodePoint
   * @param meta        Meta of the Yast
   * @returns An array of DelimiterItem matched during the generator lifetime
   *          when processing the content of a leaf block node
   */
  eatDelimiters: (
    nodePoints: ReadonlyArray<EnhancedYastNodePoint>,
    meta: Readonly<M>,
  ) => ResultOfEatDelimiters<TD>

  /**
   * Process the delimiter stack.
   *
   * @param nodePoints  An array of EnhancedYastNodePoint
   * @param meta        Meta of the Yast
   * @param delimiters  delimiters are collected through multiple times called
   *                    the `eatDelimiters()` while processing a phrasing-content block
   */
  eatPotentialTokens: (
    nodePoints: ReadonlyArray<EnhancedYastNodePoint>,
    meta: Readonly<M>,
    delimiters: TD[],
  ) => ResultOfEatPotentialTokens<T>

  /**
   * Format/Remove the given preMatchState
   *
   * @param nodePoints  An array of EnhancedYastNodePoint
   * @param meta        Meta of the Yast
   * @return
   *  - {MS}: format preMatchState to the returned matchState
   *  - {null}: ignore this preMatchState
   */
  beforeClose?: (
    nodePoints: ReadonlyArray<EnhancedYastNodePoint>,
    meta: Readonly<M>,
    state: MS,
  ) => void
}


/**
 * Params of eatDelimiters.next.
 */
export interface NextParamsOfEatDelimiters {
  /**
   * Start index of nodePoints.
   */
  startIndex: number
  /**
   * End index of nodePoints.
   */
  endIndex: number
  /**
   * precedingCodePosition is the preceding character info of the
   * nodePoints[startIndex] (skipped internal atomic tokens).
   * `null` means no such character
   */
  precedingCodePosition: EnhancedYastNodePoint | null
  /**
   * followingCodePosition is the following character info of the
   * nodePoints[endIndex-1] (skipped internal atomic tokens).
   * `null` means no such character
   */
  followingCodePosition: EnhancedYastNodePoint | null
}


/**
 *
 */
export interface InlineTokenDelimiter {
  /**
   * Delimiter type.
   */
  type: 'opener' | 'both' | 'closer' | string
  /**
   * Start index of nodePoints.
   */
  startIndex: number
  /**
   * End index of nodePoints.
   */
  endIndex: number
}


/**
 * State of match phase
 */
export interface InlineTokenizerMatchPhaseState<
  T extends YastInlineNodeType = YastInlineNodeType> {
  /**
   * Type of match phase state
   */
  type: T
}


/**
 * Potential token.
 */
export interface InlinePotentialToken<T extends YastInlineNodeType = YastInlineNodeType>
  extends YastNodeInterval {
  /**
   * Match phase state.
   */
  state: InlineTokenizerMatchPhaseState<T>
  /**
   * Expose the internal list of raw content fragments that need further
   * processing, the list will be handed over to the context for recursive
   * analysis to get the internal tokens of the current inline token.
   *
   * These content fragments will be processed before assemblePreMatchState.
   */
  innerRawContents?: YastNodeInterval[]
}


/**
 * Result of eatDelimiters.
 * @see InlineTokenizerMatchPhaseHook
 */
export type ResultOfEatDelimiters<TD extends InlineTokenDelimiter = InlineTokenDelimiter> =
  | Iterator<void, TD[], NextParamsOfEatDelimiters | null>


/**
 * Result of eatPotentialTokens.
 * @see InlineTokenizerMatchPhaseHook
 */
export type ResultOfEatPotentialTokens<T extends YastInlineNodeType = YastInlineNodeType> =
  | InlinePotentialToken<T>[]
